{"name":"Weupnp","tagline":"A tiny UPnP (Universal Plug and Play) client library written in Java","body":"# Overview\r\nWeupnp is a lightweight Java library designed to implement the [UPnP protocol](http://en.wikipedia.org/wiki/Universal_Plug_and_Play) to handle port mappings on Gateway Devices.\r\n\r\n# weupnp in the wild\r\n* Weupnp is used by the [BitLet applet](http://bitlet.org) to open ports for incoming connections and to build an [interactive console](http://www.bitlet.org/upnp) for the administration of port mappings on UPnP devices.\r\n* Since version 1.6, the [UPnP PortMapper](http://upnp-portmapper.sourceforge.net/) can use weupnp to communicate with Gateway Devices.\r\n* [Jitsi](http://www.jitsi.org/) (formerly SIP communicator) uses weupnp to gather UPnP candidates for ICE operations\r\n\r\n# Download weupnp\r\nThe link at the top of this page will allow you to download archives with source code.\r\n\r\nThe binary archives for weupnp are still distributed through the old Google Code [site](https://code.google.com/p/weupnp/downloads/list).\r\n\r\n# Licensing\r\nweupnp is released under the LGPL license.\r\n\r\n# Use weupnp\r\nUsing weupnp is fairly simple, here is an annotated example of the what you would need to do to manipulate a simple mapping on your gateway.\r\n\r\n## Annotated example\r\n\r\nSet up a logger (you can use whichever library you prefer, the example uses java.util.logging for simplicity) and start the gateway discovery: this will send a probe message to find suitable UPnP devices on the same network the client is on.\r\n```java\r\nLogger logger = LogUtils.getLogger();\r\nlogger.info(\"Starting weupnp\");\r\n\r\nGatewayDiscover discover = new GatewayDiscover();\r\nlogger.info(\"Looking for Gateway Devices\");\r\ndiscover.discover();\r\n```\r\nSelect a valid gateway that can be used to do port mappings.\r\n```java\r\nGatewayDevice d = discover.getValidGateway();\r\n```\r\nThe previous method will return `null` if no valid gateway has not been found.\r\n```java\r\nif (null != d) {\r\n    logger.info(\"Found gateway device.\\n{0} ({1})\",\r\n        new Object[]{d.getModelName(), d.getModelDescription()});\r\n} else {\r\n    logger.info(\"No valid gateway device found.\");\r\n    return;\r\n}\r\n```\r\nThe retrieved `GatewayDevice` will contain some useful information, including the internal/external addresses of the device.\r\n```java\r\nInetAddress localAddress = d.getLocalAddress();\r\nlogger.info(\"Using local address: {0}\", localAddress);\r\nString externalIPAddress = d.getExternalIPAddress();\r\nlogger.info(\"External address: {0}\", externalIPAddress);\r\n```\r\nCreate a new Port Mapping entry:\r\n```java\r\nlogger.info(\"Attempting to map port {0}\", SAMPLE_PORT);\r\nPortMappingEntry portMapping = new PortMappingEntry();\r\n```\r\nThe `getSpecificPortMappingEntry` method can be used to search for existing mappings. If it returns `true`, it means that a mapping for the given port is already registered on the gateway.\r\n```java\r\nlogger.info(\"Querying device to see if mapping for port {0} already exists\",\r\n        SAMPLE_PORT);\r\nif (!d.getSpecificPortMappingEntry(SAMPLE_PORT,\"TCP\",portMapping)) {\r\n    logger.info(\"Port was already mapped. Aborting test.\");    \r\n} else {\r\n```\r\nIn case it return false, we can move on to create the mapping by using `addPortMapping`. We will configure the gateway to forward any TCP connection it receives on `SAMPLE_PORT` to `SAMPLE_PORT` on the local address (the address of the device weupnp is running on). If the operation succeeds, the method will return `true` and the mapping will be called *test*.\r\n```java\r\n    logger.info(\"Sending port mapping request\");\r\n    if (!d.addPortMapping(SAMPLE_PORT, SAMPLE_PORT,\r\n            localAddress.getHostAddress(),\"TCP\",\"test\")) {\r\n        logger.info(\"Port mapping attempt failed\");\r\n        logger.info(\"Test FAILED\");\r\n    } else {\r\n```\r\nWait a few seconds and then remove the mapping. If your gateway has an admin interface for UPnP, you can use that time to verify that a mapping called test is present.\r\n```java\r\n        logger.info(\"Mapping successful: waiting {0} seconds before removing.\",\r\n            WAIT_TIME);\r\n        Thread.sleep(1000*WAIT_TIME);\r\n        d.deletePortMapping(SAMPLE_PORT,\"TCP\");\r\n\r\n        logger.info(\"Port mapping removed\");\r\n        logger.info(\"Test SUCCESSFUL\");\r\n    }\r\n}\r\n\r\nlogger.info(\"Stopping weupnp\");\r\n```\r\n\r\nYou can find a runnable version of the code above in the [Main](https://github.com/bitletorg/weupnp/blob/master/src/main/java/org/bitlet/weupnp/Main.java) class of the package `org.bitlet.weupnp`.\r\n\r\n# Acknowledgements\r\nThe implementation of weupnp was inspired by [miniupnp](http://miniupnp.free.fr/), a C UPnP library by Thomas Bernard.\r\n\r\n# Participate\r\nIf you wish to contribute, feel free to drop a line to @abahgat and @DCastagna.","google":"UA-2221999-4","note":"Don't delete this file! It's used internally to help with page regeneration."}